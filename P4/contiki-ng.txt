#include "contiki.h"
#include "contiki-net.h"
#include "rest-engine.h"
#include "dev/leds.h"
#include "lib/sensors.h"
#include "dev/sht11/sht11-sensor.h"
#include "dev/light-sensor.h"

PROCESS(web_sense_process, "Sense Web Demo");
PROCESS(webserver_process, "Web server");

AUTOSTART_PROCESSES(&web_sense_process, &webserver_process);

#define HISTORY 16
static int temperature[HISTORY];
static int light1[HISTORY];
static int sensors_pos;

static int get_light(void) {
    return 10 * light_sensor.value(LIGHT_SENSOR_PHOTOSYNTHETIC) / 7;
}

static int get_temp(void) {
    return ((sht11_sensor.value(SHT11_SENSOR_TEMP) / 10) - 396) / 10;
}

static const char *TOP = "<html><head><title>Contiki Web Sense</title></head><body>\n";
static const char *BOTTOM = "</body></html>\n";

static char buf[256];
static int blen;
#define ADD(...) do {                                                   \
    blen += snprintf(&buf[blen], sizeof(buf) - blen, __VA_ARGS__);      \
} while(0)

static void generate_chart(const char *title, const char *unit, int min, int max, int *values) {
    int i;
    blen = 0;
    ADD("<h1>%s</h1>\n<img src=\"http://chart.apis.google.com/chart?"
        "cht=lc&chs=400x300&chxt=x,x,y,y&chxp=1,50|3,50&"
        "chxr=2,%d,%d|0,0,30&chds=%d,%d&chxl=1:|Time|3:|%s&chd=t:",
        title, min, max, min, max, unit);
    for(i = 0; i < HISTORY; i++) {
        ADD("%s%d", i > 0 ? "," : "", values[(sensors_pos + i) % HISTORY]);
    }
    ADD("\">");
}

PROCESS_THREAD(webserver_process, ev, data) {
    PROCESS_BEGIN();

    httpd_init();

    while(1) {
        PROCESS_WAIT_EVENT_UNTIL(ev == tcpip_event);
        httpd_appcall(data);
    }

    PROCESS_END();
}

PROCESS_THREAD(web_sense_process, ev, data) {
    static struct etimer timer;
    PROCESS_BEGIN();

    sensors_pos = 0;

    etimer_set(&timer, CLOCK_SECOND * 2);
    SENSORS_ACTIVATE(light_sensor);
    SENSORS_ACTIVATE(sht11_sensor);

    while(1) {
        PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&timer));
        etimer_reset(&timer);

        light1[sensors_pos] = get_light();
        temperature[sensors_pos] = get_temp();
        sensors_pos = (sensors_pos + 1) % HISTORY;
    }

    PROCESS_END();
}

httpd_simple_script_t httpd_simple_get_script(const char *name) {
    return send_values;
}
